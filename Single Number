/*
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4
*/

class Solution {
    public int singleNumber(int[] nums) {
        List<Integer> noDupNums = new ArrayList<>(); //create list for duplicate numbers
        
        for(int i: nums){                           //for each loop 
            if(!noDupNums.contains(i)){             //if the noDupNum list does NOT contain the current int, add to noDupList
                noDupNums.add(i);                   //add to noDupNums list
            } 
            else {
                noDupNums.remove(new Integer(i));   //if it does exist, remove the integer
            }
        }
        return noDupNums.get(0);                    //return the only number left in the list (since all others have been removed)
    }
}
